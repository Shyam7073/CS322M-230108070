// RVX10 Test Program
// Tests all 10 new instructions and stores 25 to address 100 on success

93 01 00 00   // addi x3, x0, 0           // Initialize test counter
93 02 00 00   // addi x4, x0, 0           // Initialize checksum
93 1E 00 00   // addi x29, x0, 0          // Initialize success flag

// ===== TEST ANDN =====
13 03 F0 F0   // addi x6, x0, 0xF0F0      // rs1 = 0xF0F0A5A5
93 03 05 A5   // addi x7, x0, 0xA5A5
37 04 F0 F0   // lui x8, 0xF0F0
13 04 45 A5   // addi x8, x8, 0xA5A5
13 05 0F 0F   // addi x10, x0, 0x0F0F     // rs2 = 0x0F0FFFFF
93 05 FF FF   // addi x11, x0, -1
37 06 0F 0F   // lui x12, 0x0F0F
13 06 F6 FF   // addi x12, x12, -1
8B 06 84 50   // ANDN x13, x8, x12        // x13 = 0xF0F00000
93 82 02 00   // addi x5, x5, 0            // Expected: 0xF0F00000
63 94 A6 00   // bne x13, x10, fail
13 02 12 00   // addi x4, x4, 1           // Increment checksum

// ===== TEST ORN =====
13 07 F0 F0   // addi x14, x0, 0xF0F0     // rs1 = 0xF0F0A5A5
93 07 05 A5   // addi x15, x0, 0xA5A5
37 08 F0 F0   // lui x16, 0xF0F0
13 08 45 A5   // addi x16, x16, 0xA5A5
13 09 0F 0F   // addi x18, x0, 0x0F0F     // rs2 = 0x0F0FFFFF
93 09 FF FF   // addi x19, x0, -1
37 0A 0F 0F   // lui x20, 0x0F0F
13 0A FA FF   // addi x20, x20, -1
8B 0A 08 51   // ORN x21, x16, x20        // x21 = 0xF0F0A5A5
63 94 08 01   // bne x21, x16, fail
13 02 12 00   // addi x4, x4, 1           // Increment checksum

// ===== TEST XNOR =====
13 0B 55 55   // addi x22, x0, 0x5555
93 0B 55 55   // addi x23, x0, 0x5555
37 0C 55 55   // lui x24, 0x5555
13 0C 5C 55   // addi x24, x24, 0x5555
37 0D AA AA   // lui x26, 0xAAAA
13 0D AD AA   // addi x26, x26, -86
8B 0D 8C 52   // XNOR x27, x24, x24       // x27 = 0xFFFFFFFF
93 8E FE FF   // addi x29, x0, -1
63 9E BE 00   // bne x27, x29, fail
13 02 12 00   // addi x4, x4, 1           // Increment checksum

// ===== TEST MIN =====
93 0F FB FF   // addi x31, x0, -5         // rs1 = -5
13 10 0A 00   // addi x2, x0, 10          // rs2 = 10
8B 80 0F 58   // MIN x1, x31, x2          // x1 = -5
93 80 F0 FF   // addi x1, x0, -5
63 92 10 00   // bne x1, x1, fail
13 02 12 00   // addi x4, x4, 1           // Increment checksum

// ===== TEST MAX =====
93 01 64 00   // addi x3, x0, 100         // rs1 = 100
13 02 38 FF   // addi x4, x0, -200        // rs2 = -200
8B 82 81 59   // MAX x5, x3, x4           // x5 = 100
93 81 64 00   // addi x3, x0, 100
63 96 51 00   // bne x5, x3, fail
13 02 12 00   // addi x4, x4, 1           // Increment checksum

// ===== TEST MINU =====
93 03 FE FF   // addi x7, x0, -2          // rs1 = 0xFFFFFFFE
13 04 10 00   // addi x8, x0, 1           // rs2 = 1
8B 84 83 5A   // MINU x9, x7, x8          // x9 = 1
13 05 10 00   // addi x10, x0, 1
63 94 A4 00   // bne x9, x10, fail
13 02 12 00   // addi x4, x4, 1           // Increment checksum

// ===== TEST MAXU =====
93 05 FE FF   // addi x11, x0, -2         // rs1 = 0xFFFFFFFE
13 06 10 00   // addi x12, x0, 1          // rs2 = 1
8B 86 85 5B   // MAXU x13, x11, x12       // x13 = 0xFFFFFFFE
93 86 FE FF   // addi x13, x0, -2
63 96 D6 00   // bne x13, x13, fail
13 02 12 00   // addi x4, x4, 1           // Increment checksum

// ===== TEST ROL =====
93 07 01 80   // addi x15, x0, 0x80000001 // rs1 = 0x80000001
13 08 30 00   // addi x16, x0, 3          // rs2 = 3
8B 08 87 60   // ROL x17, x15, x16        // x17 = 0x0000000B
13 09 B0 00   // addi x18, x0, 11
63 94 21 01   // bne x17, x18, fail
13 02 12 00   // addi x4, x4, 1           // Increment checksum

// ===== TEST ROR =====
13 0A B0 00   // addi x20, x0, 11         // rs1 = 0x0000000B
93 0A 30 00   // addi x21, x0, 3          // rs2 = 3
8B 0B 8A 61   // ROR x22, x20, x21        // x22 = 0x80000001
93 0B 01 80   // addi x23, x0, 0x80000001
63 9E 76 00   // bne x22, x23, fail
13 02 12 00   // addi x4, x4, 1           // Increment checksum

// ===== TEST ABS =====
93 0C 80 FF   // addi x25, x0, -128       // rs1 = -128
8B 8D 0C 78   // ABS x27, x25             // x27 = 128
13 0E 80 00   // addi x28, x0, 128
63 9F DE 00   // bne x27, x28, fail
13 02 12 00   // addi x4, x4, 1           // Increment checksum

// ===== SUCCESS =====
13 0E 90 00   // addi x28, x0, 9          // Expected checksum = 10 tests
63 5C 42 01   // bge x4, x28, success     // If checksum >= 9, success
93 00 00 00   // fail: addi x1, x0, 0
73 00 10 00   // ebreak                   // Halt on failure

13 05 90 01   // success: addi x10, x0, 25 // Load success value
23 20 A5 06   // sw x10, 100(x0)          // Store 25 to address 100
93 00 00 00   // addi x1, x0, 0
73 00 10 00   // ebreak                   // Halt on success